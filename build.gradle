import edu.wpi.first.gradlerio.GradleRIOPlugin
import groovy.json.JsonSlurper


plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}


configurations.configureEach {
    exclude group: "edu.wpi.first.wpilibj"
}

tasks.register('checkAkitInstall', JavaExec) {
    dependsOn "classes"
    mainClass = "org.littletonrobotics.junction.CheckInstall"
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('autoCommit') {
    doLast {
        final String[] tasksToCommit = new String[]{"deploy", "simulate"}
        final String[] branchPrefixesToCommit = new String[]{"event", "training", "check"}

        final def branch = 'git branch --show-current'.execute().text.trim()
        final def commitMessage = "autoCommit - updated at '${new Date().toString()}'"
        final def taskNames = project.gradle.startParameter.taskNames

        // checking deploy type
        boolean isDeployOrSimulate = false
        for (String taskName : tasksToCommit) {
            isDeployOrSimulate = taskNames.any({ it.toLowerCase().contains(taskName) })
            if (isDeployOrSimulate) {
                break
            }
        }
        if (!isDeployOrSimulate) {
            println("skipping -> not a deploy or simulate")
            return
        }

        // checking branch type
        boolean isBranchToAutoCommit = false;
        for (String branchPrefix : branchPrefixesToCommit) {
            isBranchToAutoCommit = branch.startsWith(branchPrefix)
            if (isBranchToAutoCommit) {
                break
            }
        }
        if (!isBranchToAutoCommit) {
            println("skipping -> not a branch to auto commit")
            return
        }

        // committing
        exec {
            workingDir(projectDir)
            executable('git')
            args 'commit', '-am', commitMessage
            ignoreExitValue = true
        }
        println("commited to branch -> '$branch'")
        println("commited message -> '$commitMessage'")
    }
}

tasks.register('installLocalGitHookPreCommit', Copy) {
    from new File(rootProject.rootDir, '.scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
    doLast {
        println("---Added Pre Commit Git Hook Script---")
    }
}

tasks.register('installLocalGitHookPostCommit', Copy) {
    from new File(rootProject.rootDir, '.scripts/post-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
    doLast {
        println("---Added Post Commit Git Hook Script---")
    }
}

tasks.register('installLocalGitHookPostCheckout', Copy) {
    from new File(rootProject.rootDir, '.scripts/post-checkout')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
    doLast {
        println("---Added Post Checkout Git Hook Script---")
    }
}

compileJava.finalizedBy checkAkitInstall
build.dependsOn autoCommit, installLocalGitHookPreCommit, installLocalGitHookPostCommit, installLocalGitHookPostCheckout

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add '-XDstringConcat=inline'
}

